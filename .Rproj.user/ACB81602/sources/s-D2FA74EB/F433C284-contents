---
author: "Your name"
title: "Lab 5: Phenological mapping and model validation"
date: "`r format(Sys.Date(), tz = 'America/Los_Angeles')`"
output:
  word_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(here) # Start in R project directory
library(dplyr) # Data wrangling
library(ggplot2) # Plotting model outputs
library(viridis) # Color palettes for ggplot2
library(knitr) # Including graphics
library(rnpn) # Accessing NPN datasets
library(caret) # Confusion matrix
library(sf) # Working with spatial features
library(raster) # Working with rasters
#library(terra)
library(rnaturalearth) # State features
```

### **Learning Objectives**

- Produce and interpret spatialized phenology model predictions  
- Perform and interpret a confusion matrix (type of model validation analysis)  
- Understand the purpose of model validation    
- Learn some basic GIS operations in R  

### **Instructions**

There are a set of questions associated with each exercise below that you must complete either during class or on your own time. Record answers to the questions **within** the Markdown (`.Rmd`) file and record your name on line 2. Once you're done with the lab, knit the R markdown file as a Word document (`.docx`) within RStudio by clicking the `Knit` button found in the toolbar (look for a ball of yarn with a needle sticking out of it) and selecting `Knit to Word`. Ignore any warning messages that pop up in the Console during knitting. Submit the `.Rmd` **and** the `.docx` files on Canvas.

You'll need to install the `raster`, `rgdal`, `rnpn`, `sf`, `caret`, `rnaturalearth`, and `virids` packages using the `install.packages()` function. Here's a short cut to try:
```{r}
# "lapply" is applying the install.packages() function a the vector of packages
#pkgs_to_install <- c("raster", "rgdal", "rnpn", "sf", "caret", "rnaturalearth", "viridis")
#lapply(pkgs_to_install, install.packages, character.only = TRUE)
```

### **Introduction**

#### **(A) The USA National Phenology Network**

The USA National Phenology Network (USA-NPN) collects phenological observation records from volunteer and professional scientists to better understand the impact of changes in the environment on the timing of species' life cycles. The USA-NPN also provides a number of raster-based climatological data sets and phenological models. These in-situ observation and geospatial, modeled datasets are available through a number of tools and data services. For example, the [`rnpn`](https://rdrr.io/cran/rnpn/) package provides an interface to the data and products in the USA-NPN's database. 
\
\
Observational and gridded (raster) data can be visualized or analyzed together for a variety of purposes. In the following exercises, we will visualize spatial concordance between model-predicted and observed dates of lilac leaf out, which is a phenophase of lilac in which new leaves appear. A **phenophase** is an observable stage of an animal's or plant's life cycle that can be defined by a start and end point.
```{r, echo=FALSE, out.width = "650px", fig.align="left", fig.cap="Phenophases for a deciduous tree or srub. Source: USA National Phenology Network"}
knitr::include_graphics(here("Labs", "Lab5_phenoMapping_validation", "images", "NPN_phenophase.jpg"))
```

Next, we will quantify concordance between model-predicted and observed dates of the emergence of bagworm (*Thyridopteryx ephemeraeformis*) caterpillars. Bagworm caterpillars defoliate over 50 families of evergreen and deciduous trees and shrubs, primarily arborvitae, juniper, pine, and spruce. If left untreated, these pests are capable of extensive defoliation which can cause branch dieback or death. The USA-NPN provides [forecasts](https://www.usanpn.org/data/forecasts/Bagworm) of expected arrival of caterpillars to help stakeholders time their treatments to target caterpillars when they are small. A model forecast in this context means the same thing as a model prediction - the word "forecast" just implies that were forecasting phenology.

#### **(B) GIS in R**

The usage of R in GIS is growing because of its enhanced capabilities for statistics, data visualization, and spatial analytics. The benefit of using R over proprietary software such as ESRI ArcGIS is that it's free and it provides a means to have an automated and reproducible workflow. For example, users of ESRI ArcGIS usually build maps by clicking on features, tools, and menus in a graphical user interface (GUI). This can be quite laborious and annoying if you lose your file and need to start over again. In R, you write a script and can run it again at any time. We will be diving into this topic more over the next couple of weeks. In the following exercises, you will be introduced to some GIS operations in R using functions in the [`raster`](https://rspatial.org/raster/pkg/index.html) and [`sf`](https://cran.r-project.org/web/packages/sf/index.html) packages. 

The `raster` package provides functions for working with raster data. A geospatial raster is any pixelated (or gridded) data where each pixel is associated with a specific geographical location. The value of a pixel can be continuous (e.g., elevation) or categorical (e.g., land use).  
```{r, out.width = "650px", echo=FALSE, fig.align="left", fig.cap="Source: National Ecological Observatory Network"}
knitr::include_graphics(here("Labs", "Lab5_phenoMapping_validation", "images", "raster_concept.png"))
```

The `sf` package has functions for storing and working with spatial vector data. A vector uses points and line segments to identify locations on the earth whereas the raster model uses a series of cells to represent locations on the earth. We're using `sf` because it provides a syntax and data structures which are coherent with the Tidyverse, which makes it easier to understand and work with than previously developed R packages such as `sp`.  
```{r, echo=FALSE, out.width = "650px", fig.align="left", fig.cap="Example of a spatial feature created using the sf packages. Source: https://r-spatial.github.io/sf/articles/sf5.html"}
knitr::include_graphics(here("Labs", "Lab5_phenoMapping_validation", "images", "sf_map.png"))
```

### **Exercise 1: Geospatial Lilac Leaf Out Model**

The first exercise focuses on producing maps to visualize spatial concordance between model-predicted and observed dates of lilac leaf out. This exercise is modified from a [vignette](https://cran.r-project.org/web/packages/rnpn/vignettes/VII_combine_raster_point.html) for the `rnpn` package.    

#### **Step 1: Get the data**

We obtain raster data for model predictions of lilac leaf out in 2018 using the `npn_download_geospatial()` function in the `rnpn` package. Typing in the object name brings up information about the class, dimensions, spatial resolution, geographic extent, and coordinate reference system. A coordinate reference system defines how the 2-dimensional, projected map is related to real locations on earth (more on this later).
```{r}
Lilac2018 <- npn_download_geospatial(
  'si-x:lilac_leaf_ncep_historic', 
  '2018-01-01', 
)
Lilac2018
```

For plotting, it's easier to convert the raster data to a data frame. We'll use a pipeline that involves converting raster data to points (`rasterToPoints()` function in the `raster` package) in a data frame, changing the name of the data column (column # 3) to `leaf_out`, and creating a new column that "cuts" the leaf out data into 7 bins using the `cut_interval()` function.
```{r}
# Conver raster data to a data frame and format
Lilac2018_df <- rasterToPoints(Lilac2018) %>%
  data.frame() %>% # Results in a data frame
  rename("leaf_out" = 3) %>% # New column name
  mutate("leaf_out_bin" = cut_interval(leaf_out, 7)) # Create 7 bins
head(Lilac2018_df)
```

Next we download phenometric data for lilac for 2018 using the `npn_download_individual_phenometrics()` function. The `phenophase_ids` argument is set to `373` to specify that we only want data for leaf out.
```{r}
# Download phenometric data
Lilac2018Obs <- npn_download_individual_phenometrics(
  request_source = 'Brittany Barker', 
  years = '2018',
  species_ids = '35',
  phenophase_ids = '373' 
)
```

Take a look at the data dimensions. We see that there are 182 observations (rows) and 25 variables. 
```{r}
dim(Lilac2018Obs)
```

#### **Preparing the data**

For this analysis, we only need data in three columns in the phenometric data: `longitude`, `latitude`, and `first_yes_doy`. The `first_yes_doy` column specifies which day of year that lilacs first had leaf out at the location. We'll subset the columns using `select()` and take a look at the first several rows of data. 
```{r}
Lilac2018Obs_sub <- Lilac2018Obs %>%
  dplyr::select("longitude", "latitude", "first_yes_doy") # Subset data by column
head(Lilac2018Obs_sub)
```

For plotting purposes, we convert the subsetted phenometric data to a simple feature (`sf`) object using the [`st_as_sf()`](https://www.rdocumentation.org/packages/sf/versions/1.0-9/topics/st_as_sf) function. We tell the function which columns contain coordinate information and specify the `crs` argument as [`4326`](https://epsg.io/4326), which corresponds to the World Geodetic System 1984 coordinate reference system. 
```{r}
# Convert data frame to a simple feature
Lilac2018Obs_sub_sf <- st_as_sf(Lilac2018Obs_sub, coords = c("longitude", "latitude"), crs = 4326)
```

#### **Get state features and make plots**

The map is more informative if we add state boundaries. We'll use an R package called [`rnaturalearth`](https://github.com/ropensci/rnaturalearth) to get these data using the `ne_states()` function. In the pipeline, we obtain the data as an `sf` object and then subset data for the conterminous US (CONUS) using `filter()`. The feature is projected to the same coordiante reference system as the lilac leaf out raster (`Lilac2018`) and then converted to a multiline string using the `st_cast()` function.
```{r}
# Create simple feature ("sf") for US states
states <- ne_states(returnclass = "sf") %>%
  filter(geonunit == "United States of America" & !name %in% c("Alaska", "Hawaii")) %>%
  st_cast("MULTILINESTRING")
```

First let's make a plot showing predicted day of years (DOYs) for first lilac leaf out. The `geom_raster()` function in `ggplot2` uses coordinate information (`x` and `y` columns) in the `Lilac2018_df` data frame to create the map. The color palette for the map is set according to values in the `leaf_out_bin` column. A pretty color palette from the `viridis` package is applied using the `scale_fill_viridis_d()` function.
```{r, fig.height = 5, fig.width=9.5}
# Create a map using ggplot2
ggplot() + 
  geom_raster(data = Lilac2018_df, aes(x = x, y = y, fill = leaf_out_bin)) +
  geom_sf(data = states) +
  scale_fill_viridis_d("Predicted 1st\nLeaf Out DOY", option = "viridis", direction = -1) + 
  ggtitle("2018 Predicted Lilac Leaf Out") +
  xlab("") + 
  ylab("") +
  theme_bw() 
```

#### **Questions**

**(1)** Explain predictions of first leaf out for lilac in the context of degree-day accumulation. For example, where in CONUS were degree-days for lilac accumulating more rapidly and how does this relate to leaf out?

**(2)** Compare predictions of leaf out for western OR to those at the same latitude on the east coast. What do they tell you about differences in climate between these two regions? 

#### **Predicted vs. observed leaf out**

Now let's add the phenometric data so we can visualize spatial concordance between model-predicted and observed DOYs for first leaf out. Locations for each observation are plotted using their coordinate information and colored according to values in the `first_yes_doy` column. 
```{r, fig.height = 5, fig.width=9.5}
# Add locations to the map
ggplot() + 
  geom_raster(data = Lilac2018_df, aes(x = x, y = y, fill = leaf_out_bin)) +
  geom_sf(data = states) +
  geom_sf(data = Lilac2018Obs_sub_sf, aes(color = first_yes_doy), size = 3) +
  # Add locations again to create a black outline around the circles
  geom_sf(data = Lilac2018Obs_sub_sf, color = "black", shape = 21, size = 3) +
  scale_fill_viridis_d("Predicted 1st\n Leaf Out DOY", option = "viridis", direction = -1) + 
  scale_color_viridis("Observed 1st\nLeaf Out DOY", option = "viridis", direction = -1,
                      guide = guide_colourbar(reverse = TRUE)) +
  ggtitle("2018 Observed and Predicted Lilac Leaf Out") +
  xlab("") + 
  ylab("") +
  theme_bw() 
```

#### **Questions**

**(3)** Overall, how concordant were observations of first DOY of lilac leaf out with predicted DOYs? Comment on whether you seen a tendency of model over- or under-prediction.


**(4)** Where do you see strong misalignments in observed vs. predicted DOYs? Do you think these are misalignments due to model error or observer error? Why or why  not? 


### **Exercise 2: Model Forecast Validation for Bagworm**

Here we will quantify concordance between model-predicted and observed dates (day of year) of the emergence of bagworm caterpillars. Predictions of caterpillars are based on the USA-NPN's degree-day (DD) model for bagworm (click on "Source" in the [model forecast website](https://www.usanpn.org/data/forecasts/Bagworm), which uses a lower developmental threshold of 50$^\circ$F (10$^\circ$C ), a start date of March 1, and the simple average method to calculate DDs.

#### **Preparing the phenometric data**

Download bagworm phenometric data for 2022 and then subset data using `filter()` to include only observations of caterpillars collected on or later than March 1. The date filter is applied because USA-NPN's DD model for bagworm uses a start date of March 1, so we can't compare observation data to predictions that don't exist. The result is a data frame containing 2448 caterpillar observations and their associated geographic information.
```{r}
# Bagworm data (filtered)
bagworm_df <- npn_download_status_data(
  request_source = 'TCrimmins', years=c(2022), species_ids = c(1794)
  ) %>%
  filter(phenophase_description == "Caterpillars" & observation_date >= "2022-03-01")
head(bagworm_df)
```

#### **Extracting model predictions**

Next we will extract DD model predictions for each location in the phenometric dataset (i.e., `bagworm_df`). 

An empty data frame is created to store the results of a `for` loop that iterates over each row in the `bagworm_df` data frame and downloads the model predictions for that location. For each location, the model is run using a start date of March 1 and stops on the DOY when caterpillars were first observed. The last row of data is subsetted using `slice(n())` because we only want to know total DD accumulation on the observation date. 

```{r, message = FALSE, progress = FALSE, results=FALSE}
# Empty data frame to store DD accumulation (agdd) results
dd_accum_allLocs <- data.frame()

# Iterate over each row (observation) in the data frame
for (i in 1:nrow(bagworm_df)) {
  
  # Get model predictions from USA-NPN
  dd_i <- npn_get_custom_agdd_time_series(
    method = "simple", # simple average method for DD calculations
    start_date = "2022-03-01", # date to begin DD calculations
    end_date = bagworm_df$observation_date[i], # do to end DD calculations
    base_temp = 50, # lower developmental threshold
    climate_data_source = "NCEP", # climate data source
    temp_unit = "fahrenheit", # unit of temp (F vs. C)
    lat = bagworm_df$latitude[i], # latitude of location
    long = bagworm_df$longitude[i], # longitude of location
    upper_threshold = NULL) # upper threshold not used in simple average method
  
  # How many DDs had accumulated by the obs. date?
  dd_accum <- dd_i %>%
    slice(n()) %>% # Subset last row
    dplyr::select("dd_accum" = agdd) # Only need agdd data (DD accumulation)
  
  # Attach results to data frame for all results
  dd_accum_allLocs <- bind_rows(dd_accum_allLocs, dd_accum)
}
```

Add the DD accumulation data as a new column to the bagworm observation data using `bind_cols()`.
```{r}
# Create `dd_accum` column
bagworm_df2 <- bind_cols(bagworm_df, dd_accum_allLocs)
```

We'll make a second subset of bagworm observation data that includes data only for dates before March 1 and assign them a DD accumulation value of `0` (`dd_accum` = `0`) because we're assuming that no DDs accumulate before the model start date (i.e., March 1).
```{r}
# Get records documented prior to 3-1 and append to results
bagworm_df3 <- bagworm_df %>%
  filter(observation_date < "2022-03-01") %>%
  mutate(dd_accum = 0) %>% # assume that no DDs have accumulated
  bind_rows(bagworm_df2) 
```

We create a new column called `predicted_cat` that uses a conditional statement to determine whether bagworms are in the caterpillar phenophase ( 600 < DDs < 900) according the DD model. A value of `0` for a location means that bagworm is predicted to be in a different phenophase (e.g., an adult moth if DDs > 900). The `phenophase_status` column name is changed to `observed_cat` for clarity. Both columns are changed to type 'factor' (categorical data) because the confusion matrix analysis requires factors as inputs. 
```{r}
# Add column with forecast prediction based on DD accumulation on day of observation
bagworm_df3 <- bagworm_df3 %>%
  mutate(predicted_cat = factor(ifelse(dd_accum < 600, 0, 
                             ifelse(dd_accum > 900, 0, 1)), levels = c("0", "1")),
         observed_cat = factor(phenophase_status, levels = c("0", "1")))

# Compare first several rows of observed vs. predicted phenophase status
head(dplyr::select(bagworm_df3, site_id, observed_cat, predicted_cat))
```

#### **Calculate a confusion matrix**

Finally, we will statistically compare observed vs. model-predicted phenophase (`0` = not caterpillars, `1` = caterpillars) using a confusion matrix. A confusion matrix is a special kind of contingency table with two dimensions ("actual" and "predicted"), and identical sets of "classes" in both dimensions. Each combination of dimension and class is a variable in the contingency table.
\
\
```{r, echo=FALSE, out.width = "500px", fig.align="left", fig.cap="Source: https://plat.ai/blog/confusion-matrix-in-machine-learning/"}
knitr::include_graphics(here("Labs", "Lab5_phenoMapping_validation", "images", "confusion_matrix.png"))
```

The confusion matrix approach allows you to evaluate overall predictive performance as well as whether the model over- or under-predicts the caterpillar phenophase. We're not too concerned if the model predicts caterpillars are present before they are documented in the field (e.g., maybe there were only a few caterpillars present so they weren't immediately noticed by observers). Model over-prediction, wherein caterpillars are predicted later than they are observed in the field, is more problematic because decision-makers may miss the best opportunity to treat populations. 

The confusion matrix for bagworm is computed using the `confusionMatrix()` function of the `caret` package, where the inputs are observed vs. predicted caterpillars.
```{r}
# Column type must be factor for confusion matrix calculation
#confusionMatrix(bagworm_df3$predicted_cat, bagworm_df3$observed_cat)
confusionMatrix(bagworm_df3$observed_cat, bagworm_df3$predicted_cat)
```

#### **Questions**

**(5)** Interpret the confusion matrix results, paying attention to what they say about potential model under- or over-prediction. 


**(6)** In the code chunk below, create a plot that depicts the locations where bagworm caterpillar observations were collected. To do this, you'll need to convert the `bagworm_df3` data frame to an `sf` object (use `4326` for the "crs" argument) and then use `geom_sf` in the `ggplot` function to plot the locations. Copy and paste `ggplot` code from Exercise 1 to make things easier. You can give your plot an informative title.

```{r}
ggplot() + 
  #geom_raster(data = Lilac2018_df, aes(x = x, y = y, fill = leaf_out_bin)) +
  geom_sf(data = states) +
  geom_sf(data = Lilac2018Obs_sub_sf, aes(color = first_yes_doy), size = 3) +
  # Add locations again to create a black outline around the circles
  geom_sf(data = Lilac2018Obs_sub_sf, color = "black", shape = 21, size = 3) +
  scale_fill_viridis_d("Predicted 1st\n Leaf Out DOY", option = "viridis", direction = -1) + 
  scale_color_viridis("Observed 1st\nLeaf Out DOY", option = "viridis", direction = -1,
                      guide = guide_colourbar(reverse = TRUE)) +
  ggtitle("2018 Observed and Predicted Lilac Leaf Out") +
  xlab("") + 
  ylab("") +
  theme_bw() 
```

**(7)** According to your map, how many locations were the bagworm caterpillar observations derived from and where are they located? 


**(8)** Do the number and spatial distribution of the locations affect your confidence in results of the confusion matrix (i.e., how much we can rely on the results as a form of model validation)? Why or why not?


### **Conclusions**
Discuss your overall results from this lab exercise, particularly regarding the importance of visualizing and quantifying error in phenology models.
